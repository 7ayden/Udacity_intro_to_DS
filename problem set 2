import pandas
import pandasql
import csv
import datetime

def num_rainy_days(filename):

    weather_data = pandas.read_csv(filename)

    q = """
    select COUNT(*) FROM weather_data
    WHERE cast(rain as integer) = 1
   
    
    """
    
    #Execute your SQL command against the pandas frame
    rainy_days = pandasql.sqldf(q.lower(), locals())
    return rainy_days


def max_temp_aggregate_by_fog(filename):

    q = """
    SELECT fog,max(cast (maxtempi as integer)) FROM weather_data
    WHERE cast(fog as integer) = 1 or cast(fog as integer) = 0
    GROUP by fog
    """
    
    #Execute your SQL command against the pandas frame
    foggy_days = pandasql.sqldf(q.lower(), locals())
    return foggy_days

def avg_weekend_temperature(filename):

    q = """
    select avg(cast (meantempi as integer)) from weather_data
    where cast (strftime('%w', date) as integer) = 0 or cast (strftime('%w', date) as integer) =  6
    
    """
    
    #Execute your SQL command against the pandas frame
    mean_temp_weekends = pandasql.sqldf(q.lower(), locals())
    return mean_temp_weekends


def avg_min_temperature(filename):

    q = """
    select avg(cast (mintempi as integer)) from weather_data
    where mintempi > 55 and rain = 1
    """
    
    #Execute your SQL command against the pandas frame
    avg_min_temp_rainy = pandasql.sqldf(q.lower(), locals())
    return avg_min_temp_rainy



def fix_turnstile_data(filenames):

    for name in filenames:
        f_in = open(name, 'rb')
        f_out = open("updated_"+name, 'w')
        reader_in = csv.reader(f_in, delimiter=',')
        reader_out = csv.writer(f_out, delimiter=',')
        for row in reader_in:
            r1 = row[0]
            r2 = row[1]
            r3 = row[2]
            for e in range(0,((len(row)/5))):
                full_row = [r1,r2,r3, row[3+5*e],row[4+5*e],row[5+5*e],row[6+5*e],row[7+5*e]]
                reader_out.writerow(full_row)


def create_master_turnstile_file(filenames, output_file):

    with open(output_file, 'w') as master_file:
       master_file.write('C/A,UNIT,SCP,DATEn,TIMEn,DESCn,ENTRIESn,EXITSn\n')
       for filename in filenames:
            with open(filename,'rb') as f:
                for row in f:
                    master_file.write(row)
            

def filter_by_regular(filename):
   
    iter_csv = pandas.read_csv(filename, iterator=True, chunksize=1000)
    turnstile_data = pandas.concat([chunk[chunk['DESCn'] == 'REGULAR'] for chunk in iter_csv])
    
    
    return turnstile_data


def get_hourly_entries(df):
    
    ENTRIESn_shifted = df.ENTRIESn.shift(+1)
    ENTRIESn_hourly = df.ENTRIESn -  ENTRIESn_shifted 
    dict1 = {'ENTRIESn_hourly' : ENTRIESn_hourly }
    ENTRIESn_hourly_df = pandas.DataFrame (dict1)
    ENTRIESn_hourly_df.fillna(1, inplace=True) 
    df = df.join(ENTRIESn_hourly_df)
    
    return df

def get_hourly_exits(df):
    
    df['EXITSn_hourly'] = df['EXITSn'] - df['EXITSn'].shift(periods=1)
    df = df.fillna(0)
    return df

def time_to_hour(time):
    time=time.split(':')
    hour =int(time[0])
    return hour

def reformat_subway_dates(date):
    date_formatted = datetime.datetime.strptime(date, '%m-%d-%y').date()
    #date_formatted.strftime('%Y-%m-%d')
    return date_formatted

